#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Dec 09, 2024 11:51:58 AM +07  platform: Windows NT

import sys
import tkinter as tk
from tkinter import StringVar,Toplevel
import tkinter.ttk as ttk
from tkinter.constants import *
from PIL import ImageTk,Image
import os.path
import cv2
_location = os.path.dirname(__file__)
import threading
import GUIv2_support
# from picamera2 import Picamera2
import time
import readData
from readCard import*
import face_recognition
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 


class Toplevel1:
    def __init__(self, top=None):
        #self.picam2 = Picamera2()

        # Configure the camera
        #preview_config = self.picam2.create_preview_configuration(main={"format": "RGB888", "size": (640, 480)})
        #self.picam2.configure(preview_config)

        # Copy the configuration
        #self.config = self.picam2.camera_config.copy()

        # Start the camera
        #self.picam2.start()
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        top.geometry("1024x748")
        #top.attributes("-fullscreen", True)
        #top.minsize(120, 1)
        #top.maxsize(1540, 845)
        #top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.top = top
        self.document_number = tk.StringVar()
        self.full_name = tk.StringVar()
        self.nation = tk.StringVar()
        self.date_of_birth = tk.StringVar()
        self.date_of_expire = tk.StringVar()

        self.Title = tk.Label(self.top)
        self.Title.place(relx=0.381, rely=0.033, height=31, width=274)
        self.Title.configure(activebackground="#d9d9d9")
        self.Title.configure(activeforeground="black")
        self.Title.configure(anchor='w')
        self.Title.configure(background="#d9d9d9")
        self.Title.configure(compound='left')
        self.Title.configure(disabledforeground="#a3a3a3")
        self.Title.configure(font="-family {Times New Roman} -size 23 -weight bold")
        self.Title.configure(foreground="black")
        self.Title.configure(highlightbackground="#d9d9d9")
        self.Title.configure(highlightcolor="#000000")
        self.Title.configure(text='''Äá» ÃN Tá»NG Há»¢P''')

        self.SubTitle = tk.Label(self.top)
        self.SubTitle.place(relx=0.225, rely=0.1, height=21, width=694)
        self.SubTitle.configure(activebackground="#d9d9d9")
        self.SubTitle.configure(activeforeground="black")
        self.SubTitle.configure(anchor='w')
        self.SubTitle.configure(background="#d9d9d9")
        self.SubTitle.configure(compound='left')
        self.SubTitle.configure(disabledforeground="#a3a3a3")
        self.SubTitle.configure(font="-family {Times New Roman} -size 14 -weight bold")
        self.SubTitle.configure(foreground="black")
        self.SubTitle.configure(highlightbackground="#d9d9d9")
        self.SubTitle.configure(highlightcolor="#000000")
        self.SubTitle.configure(text='''Thiáº¿t Káº¿ Há» Thá»ng XÃ¡c Thá»±c KhuÃ´n Máº·t Sá»­ Dá»¥ng Xá»­ LÃ½ áº¢nh VÃ  CCCD Gáº¯n Chip''')

        self.WebcamFrame = tk.Frame(self.top)
        self.WebcamFrame.place(relx=0.01, rely=0.217, relheight=0.478, relwidth=0.458)
        self.WebcamFrame.configure(relief='groove')
        self.WebcamFrame.configure(borderwidth="2")
        self.WebcamFrame.configure(relief="groove")
        self.WebcamFrame.configure(background="#d9d9d9")
        self.WebcamFrame.configure(highlightbackground="#d9d9d9")
        self.WebcamFrame.configure(highlightcolor="#000000")

        self.Video_Webcam = tk.Label(self.WebcamFrame)
        self.Video_Webcam.place(relx=0.021, rely=0.035, height=261, width=444)
        self.Video_Webcam.configure(activebackground="#d9d9d9")
        self.Video_Webcam.configure(activeforeground="black")
        self.Video_Webcam.configure(anchor='w')
        self.Video_Webcam.configure(background="#d9d9d9")
        self.Video_Webcam.configure(compound='left')
        self.Video_Webcam.configure(disabledforeground="#a3a3a3")
        self.Video_Webcam.configure(foreground="black")
        self.Video_Webcam.configure(highlightbackground="#d9d9d9")
        self.Video_Webcam.configure(highlightcolor="#000000")
        # self.Video_Webcam.configure(text="")
        self.cap2 = cv2.VideoCapture(1)
        self.cap = cv2.VideoCapture(0)
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1024)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 748)
        #self.cap2 = cv2.VideoCapture()
        self.update_webcam()

        self.Logo = tk.Label(self.top)
        self.Logo.place(relx=0.01, rely=0.017, height=100, width=106)
        self.Logo.configure(activebackground="#d9d9d9")
        self.Logo.configure(activeforeground="black")
        self.Logo.configure(anchor='w')
        self.Logo.configure(background="#d9d9d9")
        self.Logo.configure(compound='left')
        self.Logo.configure(disabledforeground="#a3a3a3")
        self.Logo.configure(foreground="#000000")
        self.Logo.configure(highlightbackground="#d9d9d9")
        self.Logo.configure(highlightcolor="#000000")
        photo_location = os.path.join(_location,"TDTU_resize-removebg-preview.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Logo.configure(image=_img0)

        self.CheckButton = tk.Button(self.top)
        self.CheckButton.place(relx=0.029, rely=0.85, height=46, width=97)
        self.CheckButton.configure(activebackground="#d9d9d9")
        self.CheckButton.configure(activeforeground="black")
        self.CheckButton.configure(background="#6dfd44")
        self.CheckButton.configure(disabledforeground="#a3a3a3")
        self.CheckButton.configure(foreground="black")
        self.CheckButton.configure(highlightbackground="#d9d9d9")
        self.CheckButton.configure(highlightcolor="#000000")
        self.CheckButton.configure(text='''Check''')
        self.CheckButton.configure(command=self.scan_frame)

        self.ClearButton = tk.Button(self.top)
        self.ClearButton.place(relx=0.166, rely=0.85, height=46, width=97)
        self.ClearButton.configure(activebackground="#d9d9d9")
        self.ClearButton.configure(activeforeground="black")
        self.ClearButton.configure(background="#fff424")
        self.ClearButton.configure(disabledforeground="#a3a3a3")
        self.ClearButton.configure(foreground="black")
        self.ClearButton.configure(highlightbackground="#d9d9d9")
        self.ClearButton.configure(highlightcolor="#000000")
        self.ClearButton.configure(text='''Clear''')
        self.ClearButton.configure(command=self.clear_info)

        self.ExitButton = tk.Button(self.top)
        self.ExitButton.place(relx=0.303, rely=0.85, height=46, width=97)
        self.ExitButton.configure(activebackground="#d9d9d9")
        self.ExitButton.configure(activeforeground="black")
        self.ExitButton.configure(background="#ff243a")
        self.ExitButton.configure(disabledforeground="#a3a3a3")
        self.ExitButton.configure(foreground="black")
        self.ExitButton.configure(highlightbackground="#d9d9d9")
        self.ExitButton.configure(highlightcolor="#000000")
        self.ExitButton.configure(text='''Exit''')
        self.ExitButton.configure(command=self.exit_program)

        self.InforFrame = tk.Frame(self.top)
        self.InforFrame.place(relx=0.488, rely=0.167, relheight=0.792, relwidth=0.437)
        self.InforFrame.configure(relief='groove')
        self.InforFrame.configure(borderwidth="2")
        self.InforFrame.configure(relief="groove")
        self.InforFrame.configure(background="#d9d9d9")
        self.InforFrame.configure(highlightbackground="#d9d9d9")
        self.InforFrame.configure(highlightcolor="#000000")

        self.FacialLabel = tk.Label(self.InforFrame)
        self.FacialLabel.place(relx=0.624, rely=0.021, height=200, width=150)
        self.FacialLabel.configure(activebackground="#d9d9d9")
        self.FacialLabel.configure(activeforeground="black")
        self.FacialLabel.configure(anchor='w')
        self.FacialLabel.configure(background="#d9d9d9")
        self.FacialLabel.configure(compound='left')
        self.FacialLabel.configure(disabledforeground="#a3a3a3")
        self.FacialLabel.configure(foreground="black")
        self.FacialLabel.configure(highlightbackground="#d9d9d9")
        self.FacialLabel.configure(highlightcolor="#000000")
        self.facial_image = cv2.resize(cv2.imread("TDTU_resize-removebg-preview.png"),(150,200))
        self.facial_image_RGB = cv2.cvtColor(self.facial_image,cv2.COLOR_BGR2RGB)
        self.facial = ImageTk.PhotoImage(image=Image.fromarray(self.facial_image_RGB))
        self.FacialLabel.configure(image= self.facial)

        self.FullNameLabel = tk.Label(self.InforFrame)
        self.FullNameLabel.place(relx=0.045, rely=0.611, height=21, width=84)
        self.FullNameLabel.configure(activebackground="#d9d9d9")
        self.FullNameLabel.configure(activeforeground="black")
        self.FullNameLabel.configure(anchor='w')
        self.FullNameLabel.configure(background="#d9d9d9")
        self.FullNameLabel.configure(compound='left')
        self.FullNameLabel.configure(disabledforeground="#a3a3a3")
        self.FullNameLabel.configure(font="-family {Times New Roman} -size 13")
        self.FullNameLabel.configure(foreground="black")
        self.FullNameLabel.configure(highlightbackground="#d9d9d9")
        self.FullNameLabel.configure(highlightcolor="#000000")
        self.FullNameLabel.configure(text='''Full Name:''')

        self.NationLabel = tk.Label(self.InforFrame)
        self.NationLabel.place(relx=0.045, rely=0.674, height=21, width=64)
        self.NationLabel.configure(activebackground="#d9d9d9")
        self.NationLabel.configure(activeforeground="black")
        self.NationLabel.configure(anchor='w')
        self.NationLabel.configure(background="#d9d9d9")
        self.NationLabel.configure(compound='left')
        self.NationLabel.configure(disabledforeground="#a3a3a3")
        self.NationLabel.configure(font="-family {Times New Roman} -size 13")
        self.NationLabel.configure(foreground="black")
        self.NationLabel.configure(highlightbackground="#d9d9d9")
        self.NationLabel.configure(highlightcolor="#000000")
        self.NationLabel.configure(text='''Nation:''')

        self.DoBLabel = tk.Label(self.InforFrame)
        self.DoBLabel.place(relx=0.045, rely=0.737, height=21, width=104)
        self.DoBLabel.configure(activebackground="#d9d9d9")
        self.DoBLabel.configure(activeforeground="black")
        self.DoBLabel.configure(anchor='w')
        self.DoBLabel.configure(background="#d9d9d9")
        self.DoBLabel.configure(compound='left')
        self.DoBLabel.configure(disabledforeground="#a3a3a3")
        self.DoBLabel.configure(font="-family {Times New Roman} -size 13")
        self.DoBLabel.configure(foreground="black")
        self.DoBLabel.configure(highlightbackground="#d9d9d9")
        self.DoBLabel.configure(highlightcolor="#000000")
        self.DoBLabel.configure(text='''Date Of Birth:''')

        self.DoELabel = tk.Label(self.InforFrame)
        self.DoELabel.place(relx=0.045, rely=0.8, height=21, width=114)
        self.DoELabel.configure(activebackground="#d9d9d9")
        self.DoELabel.configure(activeforeground="black")
        self.DoELabel.configure(anchor='w')
        self.DoELabel.configure(background="#d9d9d9")
        self.DoELabel.configure(compound='left')
        self.DoELabel.configure(disabledforeground="#a3a3a3")
        self.DoELabel.configure(font="-family {Times New Roman} -size 13")
        self.DoELabel.configure(foreground="black")
        self.DoELabel.configure(highlightbackground="#d9d9d9")
        self.DoELabel.configure(highlightcolor="#000000")
        self.DoELabel.configure(text='''Date Of Expire:''')

        self.DocumentNumLabel = tk.Label(self.InforFrame)
        self.DocumentNumLabel.place(relx=0.045, rely=0.526, height=41, width=144)

        self.DocumentNumLabel.configure(activebackground="#d9d9d9")
        self.DocumentNumLabel.configure(activeforeground="black")
        self.DocumentNumLabel.configure(anchor='w')
        self.DocumentNumLabel.configure(background="#d9d9d9")
        self.DocumentNumLabel.configure(compound='left')
        self.DocumentNumLabel.configure(disabledforeground="#a3a3a3")
        self.DocumentNumLabel.configure(font="-family {Times New Roman} -size 13")
        self.DocumentNumLabel.configure(foreground="black")
        self.DocumentNumLabel.configure(highlightbackground="#d9d9d9")
        self.DocumentNumLabel.configure(highlightcolor="#000000")
        self.DocumentNumLabel.configure(text='''Document Number:''')
        #self.documentNum.set('''Document Number:''')

        self.DocVarLabel = tk.Label(self.InforFrame)
        self.DocVarLabel.place(relx=0.38, rely=0.547, height=21, width=154)
        self.DocVarLabel.configure(activebackground="#d9d9d9")
        self.DocVarLabel.configure(activeforeground="black")
        self.DocVarLabel.configure(anchor='w')
        self.DocVarLabel.configure(background="#d9d9d9")
        self.DocVarLabel.configure(compound='left')
        self.DocVarLabel.configure(disabledforeground="#a3a3a3")
        self.DocVarLabel.configure(foreground="black")
        self.DocVarLabel.configure(highlightbackground="#d9d9d9")
        self.DocVarLabel.configure(highlightcolor="#000000")
        self.DocVarLabel.configure(text='''DocumentNumVar''')
        self.DocVarLabel.configure(textvariable=self.document_number)
        self.document_number.set("Hello")

        self.NameVarLabel = tk.Label(self.InforFrame)
        self.NameVarLabel.place(relx=0.246, rely=0.611, height=21, width=164)
        self.NameVarLabel.configure(activebackground="#d9d9d9")
        self.NameVarLabel.configure(activeforeground="black")
        self.NameVarLabel.configure(anchor='w')
        self.NameVarLabel.configure(background="#d9d9d9")
        self.NameVarLabel.configure(compound='left')
        self.NameVarLabel.configure(disabledforeground="#a3a3a3")
        self.NameVarLabel.configure(foreground="black")
        self.NameVarLabel.configure(highlightbackground="#d9d9d9")
        self.NameVarLabel.configure(highlightcolor="#000000")
        self.NameVarLabel.configure(text='''FullNameVar''')
        self.NameVarLabel.configure(textvariable=self.full_name)
        self.full_name.set('''FullNameVar''')

        self.NationVarLabel = tk.Label(self.InforFrame)
        self.NationVarLabel.place(relx=0.201, rely=0.674, height=21, width=164)
        self.NationVarLabel.configure(activebackground="#d9d9d9")
        self.NationVarLabel.configure(activeforeground="black")
        self.NationVarLabel.configure(anchor='w')
        self.NationVarLabel.configure(background="#d9d9d9")
        self.NationVarLabel.configure(compound='left')
        self.NationVarLabel.configure(disabledforeground="#a3a3a3")
        self.NationVarLabel.configure(foreground="black")
        self.NationVarLabel.configure(highlightbackground="#d9d9d9")
        self.NationVarLabel.configure(highlightcolor="#000000")
        self.NationVarLabel.configure(text='''NationVar''')
        self.NationVarLabel.configure(textvariable=self.nation)
        self.nation.set('''NationVar''')

        self.DoBVarLabel = tk.Label(self.InforFrame)
        self.DoBVarLabel.place(relx=0.291, rely=0.737, height=21, width=144)
        self.DoBVarLabel.configure(activebackground="#d9d9d9")
        self.DoBVarLabel.configure(activeforeground="black")
        self.DoBVarLabel.configure(anchor='w')
        self.DoBVarLabel.configure(background="#d9d9d9")
        self.DoBVarLabel.configure(compound='left')
        self.DoBVarLabel.configure(disabledforeground="#a3a3a3")
        self.DoBVarLabel.configure(foreground="black")
        self.DoBVarLabel.configure(highlightbackground="#d9d9d9")
        self.DoBVarLabel.configure(highlightcolor="#000000")
        self.DoBVarLabel.configure(text='''DoB''')
        self.DoBVarLabel.configure(textvariable=self.date_of_birth)
        self.date_of_birth.set('''DoB''')

        self.DoEVar = tk.Label(self.InforFrame)
        self.DoEVar.place(relx=0.336, rely=0.8, height=21, width=134)
        self.DoEVar.configure(activebackground="#d9d9d9")
        self.DoEVar.configure(activeforeground="black")
        self.DoEVar.configure(anchor='w')
        self.DoEVar.configure(background="#d9d9d9")
        self.DoEVar.configure(compound='left')
        self.DoEVar.configure(disabledforeground="#a3a3a3")
        self.DoEVar.configure(foreground="black")
        self.DoEVar.configure(highlightbackground="#d9d9d9")
        self.DoEVar.configure(highlightcolor="#000000")
        self.DoEVar.configure(text='''DoE''')
        self.DoEVar.configure(textvariable=self.date_of_expire)
        self.date_of_expire.set('''DoE''')

    def update_webcam(self):
        global copy_image
        
        #self.frame2 = self.picam2.capture_array()
        ret,frame = self.cap.read()
        ret, frame2 = self.cap2.read()
        frame = cv2.resize(frame,(500,300))
        frame2 = cv2.resize(frame2,(500,300))
        small_frame = cv2.resize(frame2, (0, 0), fx=0.25, fy=0.25)
        rgb_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)

#     # Detect faces
        face_locations = face_recognition.face_locations(rgb_frame)

#     # Check number of faces
        if len(face_locations) == 0 or len(face_locations) > 1:
                cv2.putText(frame2,'Cant Find Any Face',(20,30),cv2.FONT_HERSHEY_SIMPLEX,1,(255,0,0),2,cv2.LINE_AA)
        else:
                cv2.putText(frame2,'Availabel Face',(20,30),cv2.FONT_HERSHEY_SIMPLEX,1,(255,0,0),2,cv2.LINE_AA)
        if ret:
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            blurred = cv2.GaussianBlur(gray, (5, 5), 0)
            _, thresh1 = cv2.threshold(blurred, 0, 250, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            contours, _ = cv2.findContours(thresh1, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            if not contours:
                return self.update_webcam()
            biggest = max(contours, key=cv2.contourArea)
            rect = cv2.minAreaRect(biggest)
            box = cv2.boxPoints(rect).astype('int')
            x, y, w, h = cv2.boundingRect(biggest)
            cv2.drawContours(frame,[box],-1,(0,0,255),2)
            cv2.rectangle(frame, (x+5, y+5), (x + w-5, y + h-5), (255, 0, 0), 2)
            copy_image = frame[y+5:y+h-5, x+5:x+w-5]

            frame2 = cv2.cvtColor(frame2,cv2.COLOR_BGR2RGB)
            self.frame_image = ImageTk.PhotoImage(image=Image.fromarray(frame2))
            self.Video_Webcam.configure(image= self.frame_image)
            self.WebcamFrame.after(1,self.update_webcam)
    def scan_frame(self):
        threading.Thread(target=self.process).start()
        GUIv2_support.popupError("Processing")
        # time.sleep(3)
        # GUIv2_support.popup.destroy()
    def process(self):
        global copy_image
        self.clear_info()
        ret, frame2 = self.cap2.read()
        #if ret:
        frame2 = cv2.cvtColor(frame2,cv2.COLOR_BGR2RGB)
        cv2.imwrite("facial.jpg", frame2)
        print("Frame ÄÃ£ ÄÆ°á»£c lÆ°u thÃ nh 'facial.jpg'")
        img = cv2.cvtColor(copy_image,cv2.COLOR_BGR2RGB)

            # Hiển thị ảnh
        plt.imshow(img, cmap='gray')  # Thang màu xám
        plt.axis('on')
        plt.show()
        try:
            Document_number, Date_of_birth, Date_of_expire = read(copy_image)

        except Exception:
            GUIv2_support.popup.destroy()
            GUIv2_support.popupError("ÄÃ£ Xáº£y Ra Lá»i")
            time.sleep(2)
            GUIv2_support.popup.destroy()

        self.date_of_birth.set(Date_of_birth)
        self.date_of_expire.set(Date_of_expire)
        try:
            fullname,docID = readData.getImage(Document_number,Date_of_birth,Date_of_expire)
        except Exception:
            GUIv2_support.popup.destroy()
            GUIv2_support.popupError("ÄÃ£ Xáº£y Ra Lá»i")
            time.sleep(2)
            GUIv2_support.popup.destroy()
        self.document_number.set(docID)
        self.full_name.set(fullname)
        image_from_card = cv2.resize(cv2.imread("output.jpg"),(150,200))
        self.FacialLabel.image = image_from_card
        GUIv2_support.face_compare(self)
    def clear_info(self):
        self.FacialLabel.configure(image="")
        self.document_number.set("")
        self.nation.set("")
        self.full_name.set("")
        self.date_of_birth.set("")
        self.date_of_expire.set("")
    def exit_program(self):
        """ThoÃ¡t chÆ°Æ¡ng trÃ¬nh."""
        self.cap.release()
        cv2.destroyAllWindows()
        self.top.quit()

def start_up():
    GUIv2_support.main()

if __name__ == '__main__':
        

        GUIv2_support.main()
